{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"RegisterRequest": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LoginRequest": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Game": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"description_raw": {
						"type": "string"
					},
					"metacritic": {
						"type": "number",
						"format": "double"
					},
					"background_image": {
						"type": "string"
					},
					"rating": {
						"type": "number",
						"format": "double"
					},
					"released": {
						"type": "string"
					},
					"added": {
						"type": "number",
						"format": "double"
					},
					"rating_top": {
						"type": "number",
						"format": "double"
					},
					"website": {
						"type": "string"
					},
					"genres": {
						"items": {
							"$ref": "#/components/schemas/Genre"
						},
						"type": "array"
					},
					"parent_platforms": {
						"items": {
							"$ref": "#/components/schemas/ParentPlatform"
						},
						"type": "array"
					},
					"stores": {
						"items": {
							"$ref": "#/components/schemas/Store"
						},
						"type": "array"
					},
					"publishers": {
						"items": {
							"$ref": "#/components/schemas/Publisher"
						},
						"type": "array"
					},
					"developers": {
						"items": {
							"$ref": "#/components/schemas/Developer"
						},
						"type": "array"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/Tag"
						},
						"type": "array"
					},
					"wishlistedBy": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					},
					"inLibraryOf": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					},
					"trailers": {
						"items": {
							"$ref": "#/components/schemas/Trailer"
						},
						"type": "array"
					},
					"screenshots": {
						"items": {
							"$ref": "#/components/schemas/Screenshot"
						},
						"type": "array"
					},
					"reviews": {
						"items": {
							"$ref": "#/components/schemas/Review"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"genres",
					"parent_platforms",
					"stores",
					"publishers",
					"developers",
					"tags",
					"wishlistedBy",
					"inLibraryOf",
					"trailers",
					"screenshots",
					"reviews"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Genre": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"games": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"games"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ParentPlatform": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"games": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"games"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Store": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"games": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"games"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Publisher": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"games": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"games"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Developer": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"games": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"games"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Tag": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"language": {
						"type": "string",
						"nullable": true
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"games": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"slug",
					"games"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"passwordHash": {
						"type": "string"
					},
					"role": {
						"type": "string",
						"enum": [
							"admin",
							"user"
						]
					},
					"wishlist": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					},
					"library": {
						"items": {
							"$ref": "#/components/schemas/Game"
						},
						"type": "array"
					},
					"reviews": {
						"items": {
							"$ref": "#/components/schemas/Review"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"username",
					"passwordHash",
					"role",
					"wishlist",
					"library",
					"reviews"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Review": {
				"properties": {
					"userId": {
						"type": "number",
						"format": "double"
					},
					"gameId": {
						"type": "number",
						"format": "double"
					},
					"review": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					},
					"game": {
						"$ref": "#/components/schemas/Game"
					}
				},
				"required": [
					"userId",
					"gameId",
					"review",
					"user",
					"game"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Trailer": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"preview": {
						"type": "string"
					},
					"data480": {
						"type": "string"
					},
					"dataMax": {
						"type": "string"
					},
					"game": {
						"$ref": "#/components/schemas/Game"
					}
				},
				"required": [
					"id",
					"name",
					"preview",
					"data480",
					"dataMax",
					"game"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Screenshot": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"image": {
						"type": "string"
					},
					"width": {
						"type": "number",
						"format": "double"
					},
					"height": {
						"type": "number",
						"format": "double"
					},
					"is_deleted": {
						"type": "boolean"
					},
					"game": {
						"$ref": "#/components/schemas/Game"
					}
				},
				"required": [
					"id",
					"image",
					"width",
					"height",
					"is_deleted",
					"game"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TagReadDto": {
				"description": "DTO for Tag entity, with language field.",
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"language": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"slug"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponse_TagReadDto_": {
				"description": "Standard interface for paginated responses.",
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"next": {
						"type": "string",
						"nullable": true
					},
					"results": {
						"items": {
							"$ref": "#/components/schemas/TagReadDto"
						},
						"type": "array"
					}
				},
				"required": [
					"count",
					"next",
					"results"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EntityUpdateDto": {
				"description": "DTO for updating and creating entities with common fields - some optional.",
				"properties": {
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"language": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"name",
					"slug"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EntityReadDto": {
				"description": "General DTO for reading entities with common fields.",
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"slug"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponse_EntityReadDto_": {
				"description": "Standard interface for paginated responses.",
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"next": {
						"type": "string",
						"nullable": true
					},
					"results": {
						"items": {
							"$ref": "#/components/schemas/EntityReadDto"
						},
						"type": "array"
					}
				},
				"required": [
					"count",
					"next",
					"results"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponse_Review_": {
				"description": "Standard interface for paginated responses.",
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"next": {
						"type": "string",
						"nullable": true
					},
					"results": {
						"items": {
							"$ref": "#/components/schemas/Review"
						},
						"type": "array"
					}
				},
				"required": [
					"count",
					"next",
					"results"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReviewCreateDto": {
				"properties": {
					"gameId": {
						"type": "number",
						"format": "double"
					},
					"review": {
						"type": "string"
					}
				},
				"required": [
					"gameId",
					"review"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReviewUpdateDto": {
				"properties": {
					"review": {
						"type": "string"
					}
				},
				"required": [
					"review"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_EntityReadDto.Exclude_keyofEntityReadDto.image_background__": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"slug"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_EntityReadDto.image_background_": {
				"$ref": "#/components/schemas/Pick_EntityReadDto.Exclude_keyofEntityReadDto.image_background__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"PlatformReadDto": {
				"$ref": "#/components/schemas/Omit_EntityReadDto.image_background_",
				"description": "DTO for ParentPlatform entity, without image_background."
			},
			"PaginatedResponse_PlatformReadDto_": {
				"description": "Standard interface for paginated responses.",
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"next": {
						"type": "string",
						"nullable": true
					},
					"results": {
						"items": {
							"$ref": "#/components/schemas/PlatformReadDto"
						},
						"type": "array"
					}
				},
				"required": [
					"count",
					"next",
					"results"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EntityWithIdDto": {
				"description": "DTO for entities with an id, name, slug, and optional image_background and language.",
				"properties": {
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"image_background": {
						"type": "string",
						"nullable": true
					},
					"language": {
						"type": "string",
						"nullable": true
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"slug",
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GameCardDto": {
				"properties": {
					"inLibraryOf": {
						"items": {
							"properties": {
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"wishlistedBy": {
						"items": {
							"properties": {
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"parent_platforms": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"rating_top": {
						"type": "number",
						"format": "double"
					},
					"background_image": {
						"type": "string"
					},
					"metacritic": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"inLibraryOf",
					"wishlistedBy",
					"parent_platforms",
					"name",
					"id"
				],
				"type": "object"
			},
			"GameReadDto": {
				"properties": {
					"inLibraryOf": {
						"items": {
							"properties": {
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"wishlistedBy": {
						"items": {
							"properties": {
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/TagReadDto"
						},
						"type": "array"
					},
					"developers": {
						"items": {
							"$ref": "#/components/schemas/EntityReadDto"
						},
						"type": "array"
					},
					"publishers": {
						"items": {
							"$ref": "#/components/schemas/EntityReadDto"
						},
						"type": "array"
					},
					"stores": {
						"items": {
							"$ref": "#/components/schemas/EntityReadDto"
						},
						"type": "array"
					},
					"parent_platforms": {
						"items": {
							"$ref": "#/components/schemas/PlatformReadDto"
						},
						"type": "array"
					},
					"genres": {
						"items": {
							"$ref": "#/components/schemas/EntityReadDto"
						},
						"type": "array"
					},
					"website": {
						"type": "string"
					},
					"rating_top": {
						"type": "number",
						"format": "double"
					},
					"added": {
						"type": "number",
						"format": "double"
					},
					"released": {
						"type": "string"
					},
					"rating": {
						"type": "number",
						"format": "double"
					},
					"background_image": {
						"type": "string"
					},
					"metacritic": {
						"type": "number",
						"format": "double"
					},
					"description_raw": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"inLibraryOf",
					"wishlistedBy",
					"tags",
					"developers",
					"publishers",
					"stores",
					"parent_platforms",
					"genres",
					"slug",
					"name",
					"id"
				],
				"type": "object"
			},
			"GameUpdateDto": {
				"properties": {
					"tags": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"developers": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"publishers": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"stores": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"parent_platforms": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"genres": {
						"items": {
							"$ref": "#/components/schemas/EntityWithIdDto"
						},
						"type": "array"
					},
					"website": {
						"type": "string"
					},
					"rating_top": {
						"type": "number",
						"format": "double"
					},
					"added": {
						"type": "number",
						"format": "double"
					},
					"released": {
						"type": "string"
					},
					"rating": {
						"type": "number",
						"format": "double"
					},
					"background_image": {
						"type": "string"
					},
					"metacritic": {
						"type": "number",
						"format": "double"
					},
					"description_raw": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"slug",
					"name"
				],
				"type": "object",
				"description": "DTO for updating and creating Game entities.\r\n'name' and 'slug' are required, all other fields are optional."
			}
		},
		"securitySchemes": {
			"admin": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			},
			"jwt": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "rawg-server",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/users": {
			"post": {
				"operationId": "Register",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"role": {
											"type": "string"
										},
										"username": {
											"type": "string"
										},
										"id": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"role",
										"username",
										"id"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Register a new user.",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Registration data (username and password).",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterRequest",
								"description": "Registration data (username and password)."
							}
						}
					}
				}
			}
		},
		"/users/sessions": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "An object containing the authentication token.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"token": {
											"type": "string"
										}
									},
									"required": [
										"token"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Authenticate a user and return a JWT token.",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Login data (username and password).",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest",
								"description": "Login data (username and password)."
							}
						}
					}
				}
			}
		},
		"/users/{userId}/wishlist": {
			"get": {
				"operationId": "GetWishlist",
				"responses": {
					"200": {
						"description": "A list of games in the user's wishlist.",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Game"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all games in a user's wishlist.\r\nRequires the user's ID to be provided in the path.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{userId}/wishlist/{gameId}": {
			"post": {
				"operationId": "AddToWishlist",
				"responses": {
					"200": {
						"description": "The result of the add operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Add a game to a user's wishlist.\r\nRequires the user's ID and the game ID to be provided in the path.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Game ID.",
						"in": "path",
						"name": "gameId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"delete": {
				"operationId": "RemoveFromWishlist",
				"responses": {
					"200": {
						"description": "The result of the remove operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Remove a game from a user's wishlist.\r\nRequires the user's ID and the game ID to be provided in the path.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Game ID.",
						"in": "path",
						"name": "gameId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{userId}/library": {
			"get": {
				"operationId": "GetLibrary",
				"responses": {
					"200": {
						"description": "A list of games in the user's library.",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Game"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all games in a user's library.\r\nRequires the user's ID to be provided in the path.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{userId}/library/{gameId}": {
			"post": {
				"operationId": "AddToLibrary",
				"responses": {
					"200": {
						"description": "The result of the add operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Add a game to a user's library.\r\nRequires the user's ID and the game ID to be provided in the path.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Game ID.",
						"in": "path",
						"name": "gameId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"delete": {
				"operationId": "RemoveFromLibrary",
				"responses": {
					"200": {
						"description": "The result of the remove operation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Remove a game from a user's library.\r\nRequires the user's ID and the game ID to be provided in the path.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Game ID.",
						"in": "path",
						"name": "gameId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tags": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "ListResponse containing tag DTOs.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_TagReadDto_"
								}
							}
						}
					}
				},
				"description": "Get a list of all tags.",
				"tags": [
					"Tags"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TagReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new tag.\r\nRequires admin access.",
				"tags": [
					"Tags"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Tag creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Tag creation data."
							}
						}
					}
				}
			}
		},
		"/tags/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Tag DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/TagReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a tag by ID.",
				"tags": [
					"Tags"
				],
				"security": [],
				"parameters": [
					{
						"description": "Tag ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated Tag DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/TagReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing tag.\r\nRequires admin access.",
				"tags": [
					"Tags"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Tag ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a tag by ID.\r\nRequires admin access.",
				"tags": [
					"Tags"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Tag ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/stores": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "PaginatedResponse containing store DTOs.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_EntityReadDto_"
								}
							}
						}
					}
				},
				"description": "Get a list of all stores with optional pagination.",
				"tags": [
					"Stores"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page.",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new store.\r\nRequires admin access.",
				"tags": [
					"Stores"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Store creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Store creation data."
							}
						}
					}
				}
			}
		},
		"/stores/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Store DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a store by ID.",
				"tags": [
					"Stores"
				],
				"security": [],
				"parameters": [
					{
						"description": "Store ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated Store DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing store.\r\nRequires admin access.",
				"tags": [
					"Stores"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Store ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a store by ID.\r\nRequires admin access.",
				"tags": [
					"Stores"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Store ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/reviews": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "PaginatedResponse containing Review entities.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_Review_"
								}
							}
						}
					}
				},
				"description": "Get a list of all reviews with optional pagination.",
				"tags": [
					"Reviews"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page.",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Review"
								}
							}
						}
					}
				},
				"description": "Create a new review.\r\nRequires user authentication.",
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Review creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReviewCreateDto",
								"description": "Review creation data."
							}
						}
					}
				}
			}
		},
		"/reviews/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Review entity or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Review"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a review by ID.",
				"tags": [
					"Reviews"
				],
				"security": [],
				"parameters": [
					{
						"description": "Review ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a review by ID.\r\nRequires user authentication.",
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Review ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/reviews/{userId}/{gameId}": {
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated Review entity or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Review"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing review.\r\nRequires user authentication.",
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "User ID.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Game ID.",
						"in": "path",
						"name": "gameId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data containing the review text.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReviewUpdateDto",
								"description": "Update data containing the review text."
							}
						}
					}
				}
			}
		},
		"/publishers": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "PaginatedResponse containing publisher DTOs.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_EntityReadDto_"
								}
							}
						}
					}
				},
				"description": "Get a list of all publishers with optional pagination.",
				"tags": [
					"Publishers"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page.",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new publisher.\r\nRequires admin access.",
				"tags": [
					"Publishers"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Publisher creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Publisher creation data."
							}
						}
					}
				}
			}
		},
		"/publishers/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Publisher DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a publisher by ID.",
				"tags": [
					"Publishers"
				],
				"security": [],
				"parameters": [
					{
						"description": "Publisher ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated Publisher DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing publisher.\r\nRequires admin access.",
				"tags": [
					"Publishers"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Publisher ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a publisher by ID.\r\nRequires admin access.",
				"tags": [
					"Publishers"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Publisher ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/platforms/lists/parents": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "ListResponse containing parent platform DTOs.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_PlatformReadDto_"
								}
							}
						}
					}
				},
				"description": "Get a list of all parent platforms.",
				"tags": [
					"ParentPlatforms"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new parent platform.\r\nRequires admin access.",
				"tags": [
					"ParentPlatforms"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Parent platform creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Parent platform creation data."
							}
						}
					}
				}
			}
		},
		"/platforms/lists/parents/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "ParentPlatform DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PlatformReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a parent platform by ID.",
				"tags": [
					"ParentPlatforms"
				],
				"security": [],
				"parameters": [
					{
						"description": "ParentPlatform ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated ParentPlatform DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PlatformReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing parent platform.\r\nRequires admin access.",
				"tags": [
					"ParentPlatforms"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "ParentPlatform ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a parent platform by ID.\r\nRequires admin access.",
				"tags": [
					"ParentPlatforms"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "ParentPlatform ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/hello": {
			"get": {
				"operationId": "SayHello",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/health": {
			"get": {
				"operationId": "Health",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"status": {
											"type": "string"
										}
									},
									"required": [
										"status"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Health check endpoint.",
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/genres": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "PaginatedResponse containing genre DTOs.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_EntityReadDto_"
								}
							}
						}
					}
				},
				"description": "Get a list of all genres with optional pagination.",
				"tags": [
					"Genres"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page.",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new genre.\r\nRequires admin access.",
				"tags": [
					"Genres"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Genre creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Genre creation data."
							}
						}
					}
				}
			}
		},
		"/genres/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Genre DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a genre by ID.",
				"tags": [
					"Genres"
				],
				"security": [],
				"parameters": [
					{
						"description": "Genre ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated Genre DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing genre.\r\nRequires admin access.",
				"tags": [
					"Genres"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Genre ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a genre by ID.\r\nRequires admin access.",
				"tags": [
					"Genres"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Genre ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/games": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"results": {
											"items": {
												"$ref": "#/components/schemas/GameCardDto"
											},
											"type": "array"
										},
										"next": {
											"type": "string",
											"nullable": true
										},
										"count": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"results",
										"next",
										"count"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get a list of all games, optionally filtered and paginated.\r\nReturns a paginated object with GameCardDto results.",
				"tags": [
					"Games"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page.",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Filter by genre.",
						"in": "query",
						"name": "genreId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by store.",
						"in": "query",
						"name": "storeId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Filter by platform.",
						"in": "query",
						"name": "platformId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Filter by publisher.",
						"in": "query",
						"name": "publisherId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Filter by developer.",
						"in": "query",
						"name": "developerId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Filter by wishlist user.",
						"in": "query",
						"name": "wishlistUserId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Filter by library user.",
						"in": "query",
						"name": "libraryUserId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Sort order.",
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Search text.",
						"in": "query",
						"name": "searchText",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by tag.",
						"in": "query",
						"name": "tagId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GameReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new game.\r\nRequires admin access.",
				"tags": [
					"Games"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Game creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GameUpdateDto",
								"description": "Game creation data."
							}
						}
					}
				}
			}
		},
		"/games/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GameReadDto"
								}
							}
						}
					}
				},
				"description": "Get a game by ID.\r\nReturns a GameReadDto or throws if not found.",
				"tags": [
					"Games"
				],
				"security": [],
				"parameters": [
					{
						"description": "Game ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated GameReadDto.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GameReadDto"
								}
							}
						}
					}
				},
				"description": "Update an existing game.\r\nRequires admin access.",
				"tags": [
					"Games"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Game ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GameUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Remove",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Delete a game by ID.\r\nRequires admin access.",
				"tags": [
					"Games"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Game ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/games/{id}/movies": {
			"get": {
				"operationId": "GetTrailers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"results": {
											"items": {
												"$ref": "#/components/schemas/Trailer"
											},
											"type": "array"
										},
										"count": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"results",
										"count"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get trailers (movies) for a game by ID.\r\nReturns a list of trailers.",
				"tags": [
					"Games"
				],
				"security": [],
				"parameters": [
					{
						"description": "Game ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/games/{id}/screenshots": {
			"get": {
				"operationId": "GetScreenshots",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"results": {
											"items": {
												"$ref": "#/components/schemas/Screenshot"
											},
											"type": "array"
										},
										"count": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"results",
										"count"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get screenshots for a game by ID.\r\nReturns a list of screenshots.",
				"tags": [
					"Games"
				],
				"security": [],
				"parameters": [
					{
						"description": "Game ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/developers": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "PaginatedResponse containing developer DTOs.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_EntityReadDto_"
								}
							}
						}
					}
				},
				"description": "Get a list of all developers with optional pagination.",
				"tags": [
					"Developers"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number for pagination.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page.",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityReadDto"
								}
							}
						}
					}
				},
				"description": "Create a new developer.\r\nRequires admin access.",
				"tags": [
					"Developers"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Developer creation data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Developer creation data."
							}
						}
					}
				}
			}
		},
		"/developers/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Developer DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Get a developer by ID.",
				"tags": [
					"Developers"
				],
				"security": [],
				"parameters": [
					{
						"description": "Developer ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Updated Developer DTO or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/EntityReadDto"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Update an existing developer.\r\nRequires admin access.",
				"tags": [
					"Developers"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Developer ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityUpdateDto",
								"description": "Update data."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Message indicating result.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete a developer by ID.\r\nRequires admin access.",
				"tags": [
					"Developers"
				],
				"security": [
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Developer ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}